#include "DataTypes.cginc"

RWStructuredBuffer<float2> positions;
RWStructuredBuffer<float2> lastPositions;
RWStructuredBuffer<float2> velocities;
RWStructuredBuffer<float2> forces;
RWStructuredBuffer<ParticleProperties> properties;


float timeStep;
float lifeEnd;
float2 boundaryLow;
float2 boundaryHigh;
float drag;


const static float2 moving_delta = { 0.001f, 0.001f };
const static float2 max_velocity = { 10.0f, 10.0f };
const static float2 neg_max_velocity = { -10.0f, -10.0f };


#pragma kernel Integrate1
[numthreads(PARTICLE_BLOCKSIZE,1,1)]
void Integrate1(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;
	forces[i] = float2(0,0);

	if (properties[i].state != PARTICLE_STATE_DEAD) {
		lastPositions[i] = positions[i];
		//optional air resistance
		if(drag > 0)
			forces[i] -= drag * velocities[i] * 0.5 * timeStep * dot(velocities[i], velocities[i]);
		velocities[i] += (0.5 * timeStep * forces[i]);
		positions[i] += (0.5 * timeStep * velocities[i]);
		velocities[i] = clamp(velocities[i], neg_max_velocity, max_velocity);


		// Check if the particle is stationary or out of bounds
		uint in_bounds = (uint) all(step(positions[i], boundaryHigh)) & all(step(boundaryLow, positions[i]));
		uint is_mobile = 1;//(uint) any(step(moving_delta, abs(velocities[i])));
		properties[i].state = in_bounds & is_mobile ? properties[i].state : PARTICLE_STATE_DEAD;
	}

}

#pragma kernel Integrate2
[numthreads(PARTICLE_BLOCKSIZE, 1, 1)]
void Integrate2(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;
	if (properties[i].state != PARTICLE_STATE_DEAD) {
		velocities[i] += (0.5 * timeStep * forces[i]);
		properties[i].life += timeStep;
		properties[i].state = step(properties[i].life, lifeEnd) ? properties[i].state : PARTICLE_STATE_DEAD;
		float life = properties[i].life / lifeEnd;
		properties[i].color.a = lerp(1, 0, step(0.8, life) * (life - 0.8) / 0.20);

		float forFun = dot(forces[i], forces[i]);
		//properties[i].color.rgb = lerp(float3(0, 0, 1), float3(1, 0, 0), float3(forFun, forFun, forFun));
		//properties[i].color.a = lerp(0, 1, min(1, forFun / 10));


		velocities[i] = clamp(velocities[i], neg_max_velocity, max_velocity);
	}
}

