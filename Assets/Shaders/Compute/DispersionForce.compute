// Each #kernel tells which function to compile; you can have many kernels

#include "DataTypes.cginc"

#pragma kernel ApplyForces

RWStructuredBuffer<float2> positions;
RWStructuredBuffer<float2> forces;
RWStructuredBuffer<ParticleProperties> properties;
StructuredBuffer<ParticleGInfo> ginfo;
StructuredBuffer<int> nlist;

float cutoff;
float strength;
int maxNeighbors;
const static float PI = 3.14159254f;

[numthreads(PARTICLE_BLOCKSIZE,1,1)]
void ApplyForces(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;
	uint NP, _, nj;
	positions.GetDimensions(NP, _);
	float r2, s2, deno;
	float2 r, f;
	
	
	s2 = cutoff * cutoff;
	deno = 1.0 / s2;
	
	if (properties[i].state == PARTICLE_STATE_NLIST_VALID && ginfo[i].interactions & INTERACTIONS_DISPERSION) {
		for (int j = 0; j < maxNeighbors; j++) {
			nj = nlist[NLIST_INDEX(i, j)];
			if (nj == -1)
				break;

			if (!(ginfo[nj].interactions & INTERACTIONS_DISPERSION))
				continue;
			r = positions[nj] - positions[i];
			r2 = dot(r, r);
			if (r2 < s2) {				
				f = strength * sin(PI / 2 * r2 * deno) * r;				
				//f = -4 * strength * ( 6 *  pow(s2 / r2, 3) -  12 * pow(s2 / r2, 6)) * r;
				forces[i] -= f;
				forces[nj] += f;
			}
		}
	}
}
