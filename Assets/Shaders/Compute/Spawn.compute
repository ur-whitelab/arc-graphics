#include "DataTypes.cginc"

//has to be 1 to avoid concurrent particle modifications
#define SPAWN_BLOCKSIZE_X 1
#define SPAWN_BLOCKSIZE_Y 128


RWStructuredBuffer<float2> positions;
RWStructuredBuffer<float2> lastPositions;
RWStructuredBuffer<float2> velocities;
RWStructuredBuffer<int> spawnTimers;
StructuredBuffer<Source> sources;
RWStructuredBuffer<ParticleProperties> properties;
RWStructuredBuffer<ParticleGInfo> ginfo;


groupshared int sourceCount;


#pragma kernel Spawn	
/*
* The block structure is spawn points by particles.
*/
[numthreads(SPAWN_BLOCKSIZE_X, SPAWN_BLOCKSIZE_Y, 1)]
void Spawn(uint3 id : SV_DispatchThreadID) {

	//check the timers to see if it's time to spawn
	uint ns, np, _;//throw away variable
	spawnTimers.GetDimensions(ns, _);
	properties.GetDimensions(np, _);

	if (id.y == 0) {
		sourceCount = 0;
		spawnTimers[id.x] += 1;
	}

	GroupMemoryBarrierWithGroupSync();

	//check if we need to spawn
	if (sources[id.x].spawn_period > 0 &&  (uint) (spawnTimers[id.x]) % sources[id.x].spawn_period == 0) {

		//we are going to spawn
		//search particles along y thread id. This partitions the particles amongst the y threads
		int can_add = 0;
		int stride = ceil(((float)np) / SPAWN_BLOCKSIZE_Y);

		for (uint i = stride * id.y; i < min(np, stride * (id.y + 1)); i++) {
			//only can add if the particle is not in use.
			can_add |= (properties[i].state == PARTICLE_STATE_DEAD);
		}

		//announce we're going to add as many as we can.
		int count;
		InterlockedAdd(sourceCount, can_add, count);

		//check if we succeeded in being first to add and we could have added
		if (can_add && count == 0) {
			for (i = stride * id.y; i < min(np, stride * (id.y + 1)); i++) {
				int state;
				//go ahead and try add now
				if (can_add && properties[i].state == PARTICLE_STATE_DEAD) {

					//there may be other nx's interacting. Going to sort-of ignore that
					//by interlocked exchanges. It's not deterministic though if we'll get enough
					//particles for the source.
					InterlockedExchange(properties[i].state, PARTICLE_STATE_ALIVE, state);
					if (state != PARTICLE_STATE_DEAD)
						continue; //tried making the particle alive, but someone else got to it
					can_add--;

					positions[i] = sources[id.x].position;					
					lastPositions[i] = sources[id.x].position;
					velocities[i] = sources[id.x].velocity;					
					properties[i].life = sources[id.x].life_start;										
					properties[i].color = sources[id.x].color;

					properties[i].lastModifier = PARTICLE_MODIFIER_SPAWN;
					properties[i].lastModifierIndex = id.x;
					
					ginfo[i].group = sources[id.x].group;
							
				}
				if (!can_add)
					break;
			}
		}

		//reset the sources count		
		if (id.y == 0) {
			spawnTimers[id.x] = 0;
		}	
	}
	
}