// Each #kernel tells which function to compile; you can have many kernels

#include "DataTypes.cginc"


#pragma kernel ApplyForces


StructuredBuffer<float2> positions;
RWStructuredBuffer<float2> forces;
RWStructuredBuffer<ParticleProperties> properties;
StructuredBuffer<ParticleGInfo> ginfo;
StructuredBuffer<int> nlist;

int maxNeighbors;
float strength;
float cutoff;



[numthreads(PARTICLE_BLOCKSIZE, 1, 1)]
void ApplyForces(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	//need NP for indexing nlist
	uint NP, _;
	positions.GetDimensions(NP, _);
	float2 r;
	float r2;
	float c;
	int nj;

	
	if (properties[i].state == PARTICLE_STATE_NLIST_VALID && ginfo[i].interactions & INTERACTIONS_GRAVITY) {
		for (int j = 0; j < maxNeighbors; j++) {
			nj = nlist[NLIST_INDEX(i, j)];
			if (nj == -1)
				break;

			if (!(ginfo[nj].interactions & INTERACTIONS_GRAVITY))
				continue;

			r = positions[nj] - positions[i];
			r2 = dot(r, r);

			if (r2 > (cutoff * cutoff))
				continue;


			r = normalize(r);
			r2 += 0.2; //add to avoid singularity
			//compute cutoff correction to zeroforces there
			c = 1.0 / (cutoff * cutoff + 0.2);
			//now total strength
			c = strength * (1.0 / r2 - c);
			forces[i] += c * r; 
			forces[nj] -= c * r;
		}
	}
}
