#include "DataTypes.cginc"


#pragma kernel Intersections
#pragma kernel TreatExplosions


StructuredBuffer<float2> positions;
RWStructuredBuffer<ParticleGInfo> ginfo;
RWStructuredBuffer<ParticleProperties> properties;
StructuredBuffer<int> nlist;

int maxNeighbors;
float cutoff;
float explodeTime;


[numthreads(PARTICLE_BLOCKSIZE, 1, 1)]
void TreatExplosions(uint3 id : SV_DispatchThreadID)
{
	if (properties[id.x].state == PARTICLE_STATE_EXPLODING)
	{		
		properties[id.x].color.a = (explodeTime - properties[id.x].life) / explodeTime;
		if(properties[id.x].life >= explodeTime)
			properties[id.x].state = PARTICLE_STATE_DEAD;
	}
}

[numthreads(PARTICLE_BLOCKSIZE, 1, 1)]
void Intersections(uint3 id : SV_DispatchThreadID)
{
	int i = id.x;
	//need NP for indexing nlist
	uint NP, _;
	positions.GetDimensions(NP, _);
	float2 r;
	float r2;
	int nj;


	if (properties[i].state == PARTICLE_STATE_NLIST_VALID || properties[i].state == PARTICLE_STATE_EXPLODING) {
		for (int j = 0; j < maxNeighbors; j++) {
			nj = nlist[NLIST_INDEX(i, j)];
			if (nj == -1)
				break;
			if (ginfo[i].group == ginfo[nj].group)
				continue;
			r = positions[nj] - positions[i];
			r2 = dot(r, r);
			//process death
			if (r2 < (cutoff * cutoff)) {
				if (properties[i].state == PARTICLE_STATE_NLIST_VALID) {
					properties[i].state = PARTICLE_STATE_EXPLODING;
					properties[i].lastModifier = PARTICLE_MODIFIER_PARTICLE;
					properties[i].lastModifierIndex = ginfo[nj].group;
					properties[i].life = 0;
				}

				if (properties[nj].state == PARTICLE_STATE_NLIST_VALID) {
					properties[nj].state = PARTICLE_STATE_EXPLODING;
					properties[nj].lastModifier = PARTICLE_MODIFIER_PARTICLE;
					properties[nj].lastModifierIndex = ginfo[i].group;
					properties[nj].life = 0;
				}			
			}
		}
	}
}
