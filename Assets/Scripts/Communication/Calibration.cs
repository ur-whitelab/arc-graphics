// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Reactors {

  /// <summary>Holder for reflection information generated from calibration.proto</summary>
  public static partial class CalibrationReflection {

    #region Descriptor
    /// <summary>File descriptor for calibration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CalibrationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFjYWxpYnJhdGlvbi5wcm90bxIIcmVhY3RvcnMiKAoRQ2FsaWJyYXRpb25T",
            "dGF0dXMSEwoLQ2FsaWJyYXRpbmcYASABKAgirgEKDENoZWNrZXJib2FyZBIQ",
            "CghUb3BMZWZ0eBgBIAEoAhIQCghUb3BMZWZ0eRgCIAEoAhIRCglUb3BSaWdo",
            "dHgYAyABKAISEQoJVG9wUmlnaHR5GAQgASgCEhMKC0JvdHRvbUxlZnR4GAUg",
            "ASgCEhMKC0JvdHRvbUxlZnR5GAYgASgCEhQKDEJvdHRvbVJpZ2h0eBgHIAEo",
            "AhIUCgxCb3R0b21SaWdodHkYCCABKAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Reactors.CalibrationStatus), global::Reactors.CalibrationStatus.Parser, new[]{ "Calibrating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Reactors.Checkerboard), global::Reactors.Checkerboard.Parser, new[]{ "TopLeftx", "TopLefty", "TopRightx", "TopRighty", "BottomLeftx", "BottomLefty", "BottomRightx", "BottomRighty" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CalibrationStatus : pb::IMessage<CalibrationStatus> {
    private static readonly pb::MessageParser<CalibrationStatus> _parser = new pb::MessageParser<CalibrationStatus>(() => new CalibrationStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalibrationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Reactors.CalibrationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStatus(CalibrationStatus other) : this() {
      calibrating_ = other.calibrating_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibrationStatus Clone() {
      return new CalibrationStatus(this);
    }

    /// <summary>Field number for the "Calibrating" field.</summary>
    public const int CalibratingFieldNumber = 1;
    private bool calibrating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Calibrating {
      get { return calibrating_; }
      set {
        calibrating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalibrationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalibrationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Calibrating != other.Calibrating) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Calibrating != false) hash ^= Calibrating.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Calibrating != false) {
        output.WriteRawTag(8);
        output.WriteBool(Calibrating);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Calibrating != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalibrationStatus other) {
      if (other == null) {
        return;
      }
      if (other.Calibrating != false) {
        Calibrating = other.Calibrating;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Calibrating = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Checkerboard : pb::IMessage<Checkerboard> {
    private static readonly pb::MessageParser<Checkerboard> _parser = new pb::MessageParser<Checkerboard>(() => new Checkerboard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Checkerboard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Reactors.CalibrationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Checkerboard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Checkerboard(Checkerboard other) : this() {
      topLeftx_ = other.topLeftx_;
      topLefty_ = other.topLefty_;
      topRightx_ = other.topRightx_;
      topRighty_ = other.topRighty_;
      bottomLeftx_ = other.bottomLeftx_;
      bottomLefty_ = other.bottomLefty_;
      bottomRightx_ = other.bottomRightx_;
      bottomRighty_ = other.bottomRighty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Checkerboard Clone() {
      return new Checkerboard(this);
    }

    /// <summary>Field number for the "TopLeftx" field.</summary>
    public const int TopLeftxFieldNumber = 1;
    private float topLeftx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopLeftx {
      get { return topLeftx_; }
      set {
        topLeftx_ = value;
      }
    }

    /// <summary>Field number for the "TopLefty" field.</summary>
    public const int TopLeftyFieldNumber = 2;
    private float topLefty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopLefty {
      get { return topLefty_; }
      set {
        topLefty_ = value;
      }
    }

    /// <summary>Field number for the "TopRightx" field.</summary>
    public const int TopRightxFieldNumber = 3;
    private float topRightx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopRightx {
      get { return topRightx_; }
      set {
        topRightx_ = value;
      }
    }

    /// <summary>Field number for the "TopRighty" field.</summary>
    public const int TopRightyFieldNumber = 4;
    private float topRighty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopRighty {
      get { return topRighty_; }
      set {
        topRighty_ = value;
      }
    }

    /// <summary>Field number for the "BottomLeftx" field.</summary>
    public const int BottomLeftxFieldNumber = 5;
    private float bottomLeftx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BottomLeftx {
      get { return bottomLeftx_; }
      set {
        bottomLeftx_ = value;
      }
    }

    /// <summary>Field number for the "BottomLefty" field.</summary>
    public const int BottomLeftyFieldNumber = 6;
    private float bottomLefty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BottomLefty {
      get { return bottomLefty_; }
      set {
        bottomLefty_ = value;
      }
    }

    /// <summary>Field number for the "BottomRightx" field.</summary>
    public const int BottomRightxFieldNumber = 7;
    private float bottomRightx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BottomRightx {
      get { return bottomRightx_; }
      set {
        bottomRightx_ = value;
      }
    }

    /// <summary>Field number for the "BottomRighty" field.</summary>
    public const int BottomRightyFieldNumber = 8;
    private float bottomRighty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BottomRighty {
      get { return bottomRighty_; }
      set {
        bottomRighty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Checkerboard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Checkerboard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopLeftx != other.TopLeftx) return false;
      if (TopLefty != other.TopLefty) return false;
      if (TopRightx != other.TopRightx) return false;
      if (TopRighty != other.TopRighty) return false;
      if (BottomLeftx != other.BottomLeftx) return false;
      if (BottomLefty != other.BottomLefty) return false;
      if (BottomRightx != other.BottomRightx) return false;
      if (BottomRighty != other.BottomRighty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopLeftx != 0F) hash ^= TopLeftx.GetHashCode();
      if (TopLefty != 0F) hash ^= TopLefty.GetHashCode();
      if (TopRightx != 0F) hash ^= TopRightx.GetHashCode();
      if (TopRighty != 0F) hash ^= TopRighty.GetHashCode();
      if (BottomLeftx != 0F) hash ^= BottomLeftx.GetHashCode();
      if (BottomLefty != 0F) hash ^= BottomLefty.GetHashCode();
      if (BottomRightx != 0F) hash ^= BottomRightx.GetHashCode();
      if (BottomRighty != 0F) hash ^= BottomRighty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopLeftx != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TopLeftx);
      }
      if (TopLefty != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TopLefty);
      }
      if (TopRightx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TopRightx);
      }
      if (TopRighty != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TopRighty);
      }
      if (BottomLeftx != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BottomLeftx);
      }
      if (BottomLefty != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BottomLefty);
      }
      if (BottomRightx != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BottomRightx);
      }
      if (BottomRighty != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BottomRighty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopLeftx != 0F) {
        size += 1 + 4;
      }
      if (TopLefty != 0F) {
        size += 1 + 4;
      }
      if (TopRightx != 0F) {
        size += 1 + 4;
      }
      if (TopRighty != 0F) {
        size += 1 + 4;
      }
      if (BottomLeftx != 0F) {
        size += 1 + 4;
      }
      if (BottomLefty != 0F) {
        size += 1 + 4;
      }
      if (BottomRightx != 0F) {
        size += 1 + 4;
      }
      if (BottomRighty != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Checkerboard other) {
      if (other == null) {
        return;
      }
      if (other.TopLeftx != 0F) {
        TopLeftx = other.TopLeftx;
      }
      if (other.TopLefty != 0F) {
        TopLefty = other.TopLefty;
      }
      if (other.TopRightx != 0F) {
        TopRightx = other.TopRightx;
      }
      if (other.TopRighty != 0F) {
        TopRighty = other.TopRighty;
      }
      if (other.BottomLeftx != 0F) {
        BottomLeftx = other.BottomLeftx;
      }
      if (other.BottomLefty != 0F) {
        BottomLefty = other.BottomLefty;
      }
      if (other.BottomRightx != 0F) {
        BottomRightx = other.BottomRightx;
      }
      if (other.BottomRighty != 0F) {
        BottomRighty = other.BottomRighty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            TopLeftx = input.ReadFloat();
            break;
          }
          case 21: {
            TopLefty = input.ReadFloat();
            break;
          }
          case 29: {
            TopRightx = input.ReadFloat();
            break;
          }
          case 37: {
            TopRighty = input.ReadFloat();
            break;
          }
          case 45: {
            BottomLeftx = input.ReadFloat();
            break;
          }
          case 53: {
            BottomLefty = input.ReadFloat();
            break;
          }
          case 61: {
            BottomRightx = input.ReadFloat();
            break;
          }
          case 69: {
            BottomRighty = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
